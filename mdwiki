#!/usr/bin/env perl
use Mojolicious::Lite;
use Data::Dumper;

my $config = plugin 'Config';

get '/' => sub { return shift->redirect_to("./index") }; 


get '/edit/:slug' => sub {
  my $c = shift;
  my $slug  = $c->param('slug');
  my $isnew = $c->param('isnew');    # empty or 'new'
print "isnew $isnew \n";
print "slug $slug \n";
print "slug " . $c->stash('slug') . " \n";
  my $title  = $c->param('title');
  my $md_raw;
  if ($isnew eq 'new') {
    $md_raw = <<"EOT";
# $title 

## First section goes here

 * a bullet item

## Second section goes here

### a sub-section

  [Mojolicious](http://mojolici.us) - a link to outside web page

// this line is only seen in edit mode, use as notes for author

EOT
  } else {
    $md_raw = slurp_md($slug);
    if (!$md_raw) {
       $c->flash( flash_not_ok => "No such article");
       return $c->redirect_to("../../../index");
    };
  };
  my $html   = md_to_html ($md_raw); 
  return $c->render(template => 'edit', md_raw => $md_raw, html => $html,  'slug' => $slug, 
      isnew => $isnew);
};


post '/edit/:slug' => {slug => ''} => sub {
  my $c = shift;
  my $slug    = $c->param('slug');
  my $isnew   = $c->param('isnew') || '';

  if ($c->param('btn') eq 'Preview') { #preview
    my $md_raw = $c->param('md_raw');
    my $html   = md_to_html ($md_raw); 

    $c->render(template => 'edit', md_raw => $md_raw, html => $html, 'slug' => $slug, isnew => $isnew);
  }; 
 
  if ($c->param('btn') eq 'Save') { #save
    my $md_raw = $c->param('md_raw');
    save_md($slug, $md_raw); 
    $c->flash( flash_ok => "Article saved");
    return $c->redirect_to("../$slug");
  };

};



get '/login'  => sub {
  my $c = shift;
  $c->redirect_to("./index") if ($c->session->{'user_name'});
  $c->render(template => 'login');
};


post '/login' => sub  {
  my $c = shift;
  my $pwc = $c->param('passcode');
  my $user_name = $config->{'authors'}->{$pwc};
  if ($user_name) {
    $c->session->{'user_name'} = $user_name;
    $c->flash( flash_ok => "You are logged in, $user_name");
    $c->redirect_to("./index"); 
  };

  $c->flash( flash_not_ok => "Unknown passcode");
  $c->redirect_to('./login');  #redirect, otherwise flash does not show
};


get '/logout' => sub {
  my $c = shift;
  my $user_name = $c->session->{'user_name'};
  undef  $c->session->{'user_name'};
  $c->flash( flash_ok => "You are now logged out, $user_name");
  $c->redirect_to("./index");
};


get '/new/:slug' => {slug => ''} =>  sub {
  my $c      = shift;
  my $title  = $c->param('slug');
  my $slug_   = clean_up_slug($title);
  my $html = '(click Preview button above to see your edits)';
  return $c->render(template => 'new', title => $title, slug_ => $slug_);
};


app->validator->add_check(slug_is_valid => sub {
  my ($validation, $name, $value) = @_;
  return new_slug_is_valid($value); 
});



post '/new' =>  sub {
  my $c      = shift;
  my $slug   =  $c->param('slug');
  my $title  =  $c->param('title');
  my $isnew  =  $c->param('isnew');
  my $validation = $c->validation;
  return $c->render unless $validation->has_data;

  $validation->required('slug')->size(3, 40)->slug_is_valid();
  $validation->required('title')->size(3, 128);

  if ($c->validation->has_error || ($c->param('btn') eq 'test_slug')) {
    if (!$c->validation->has_error) {
      $c->flash( flash_ok => 'Slug and Title OK' );
    };
    return $c->render('new');
  };

  # title and slug, okay, go edit new article:
  if (($c->param('btn') eq 'create')) { #&& (!$c->validation->has_error)) { 

    $c->flash( flash_ok => 'Slug OK, add text below' );
  #  $c->render( template => 'edit', title => $title, slug => $slug, isnew => 0, 
  #    md_raw => $md_raw, html => '' );
    return $c->redirect_to("./edit/$slug/\?isnew=new&title=$title");
  };

}; #=> 'new';


get '/index' => sub {
  my $c      = shift;
  my @slugs = @{all_slugs()};     # get filesnames without extension
  my %firstlines;
  foreach my $f (@slugs) {
    open(my $fh, '<:encoding(UTF-8)', "/var/www/html/mdwiki/md/$f.md") 
      or die "cannot open < $f : $!";
    my $firstline = <$fh>; #read 1st line
    if ($firstline && $firstline =~ /^#.*/) { $firstlines{$f} = $firstline };
    close $fh; 
  };
  $c->render(template => 'index',  slugs => \@slugs, firstlines => \%firstlines);
};


get '/:slug' => sub {
  my $c = shift;
  my $slug =  $c->param('slug');
  
  my $md = slurp_md($slug);
  if (!$md) {
     return $c->redirect_to(correct_slug($slug)) if (correct_slug($slug));  #repair CamelCase errors
  }; 
  my $html =  md_to_html($md);
  if ($html) {
    return $c->render(template => 'wiki', 'html' => $html, 'slug' => $slug);
  };
  $c->redirect_to("./index");
};


# ----------

sub new_slug_is_valid {
  my $slug = shift;
  my $existing_slugs = all_slugs();
  my @reserved_words = qw(edit admin new login logout index about readme fuck);
  push (@$existing_slugs, @reserved_words);
  map {lc} @$existing_slugs;  
  my @hits =  (grep {$_ eq lc $slug} @$existing_slugs); 
#print Dumper @$existing_slugs;
#print Dumper @;
  return  scalar @hits;
}


sub clean_up_slug {
  my $slug = shift;
  $slug =~ s/[ ]+/_/g;
  $slug =~ s/[^a-z0-9_-]+//ig; 
#print  "slug = $slug";
}

# .md files are saved with /CamelCase filenames
# if user attempts to get /camelcase , we correct the slug
sub correct_slug {
  my $slug = shift;
  my $existing_slugs = all_slugs();
  foreach my $s (@$existing_slugs) {
    if ((lc $slug) eq (lc $s)) {
      print "\n--" . $s . "--\n";
      return $s;
    };
  }; 
  return '';
}

sub all_slugs {
  opendir my $dir, "./md" or die "Cannot open directory  : $!";
  my @files = readdir $dir;
  closedir $dir;
  @files = grep { !/^\.{1,2}/ } @files;     # remove . and ..
  @files = grep { /\.md$/ } @files;         # keep .md files only
  map {$_ =~ s/(.*?)\.md$/$1/ } @files;     # get filesnames without extension
  return \@files;
}


sub slurp_md {
  my $file_name = shift;
  $file_name .=   ".md";
  my $md = '';
  if (open(my $fh, '<:encoding(UTF-8)', "/var/www/html/mdwiki/md/$file_name") ) {
		#or die "$0: cannot open < $file_name : $!";
    local $/ = undef;
    $md = <$fh>; #slurp content
    close $fh; 
  };
  return $md;
}


sub save_md {
  my $file_name = shift . ".md";
  my $md = shift;
  open (my $fh, ">:encoding(UTF-8)", "./md/$file_name") or die "cannot open file for writing $!"; 
  print $fh $md; 
  close ($fh);
}


use Text::Markdown 'markdown';
sub md_to_html {
  my $md = shift;
  my $html =  markdown($md);
  $html =~ s/>http[s]*:\/\//>/g;      #remove http[s]:// from visible site name
  return $html;
}

app->start;

__DATA__

@@ index.html.ep
% layout 'default';
% title 'Index of Pages';

<h2><%= config('index_heading') %></h2>

% my @slugz =  sort @$slugs;
<ul>
% for my $slug (@slugz) {
  <li> <a href="./<%= $slug %>"><%= $slug %></a> : <%= $$firstlines{$slug} %> </li>

% };
  <li> Special pages: </li>
% if (session 'user_name') {
  <li> <a href="./new">Create New Page</a>
  <li> <a href="./logout">Logout</a> <%= session ('user_name') %>
% } else {
  <li> <a href="./login">Login</a>
% };
</ul>

@@ wiki.html.ep
% layout 'default';
% title 'wiki';
<a href="./edit/<%= $slug %>">Edit this page</a>
<article>
%== $html
</article>


@@ new.html.ep
% layout 'default', suppress_footer => 1;
% title 'new article';

%= form_for './new' => (method => 'POST') => begin
<div>
% if (my $err = validation->error('slug')) {
        <p>
          %= 'At least 3 charactes are required.' if $err->[0] eq 'required';
          %= 'Already in use' if $err->[0] eq 'is_valid_slug';
        </p>
% };
</div> 
  %= label_for  title => 'Title' 
  %= text_field 'title', size => "100"
  %= label_for  slug  => 'Slug' 
  %= text_field 'slug', style => "display: inline-block", pattern => '[a-zA-Z0-9_.]+'
  %= submit_button 'Test Slug', name => 'btn', value => 'test_slug', caption => 'Test Slug'
<br/>  
  %#= submit_button 'Save & Create Page', name => 'btn', value => 'create'
  <button name='btn' value='create' type="submit">Save & Create Pag</button>
  <a  style="display: inline-block" href="./index">Cancel</a>
% end



@@ edit.html.ep
% layout 'default', suppress_footer => 1;
% title 'Edit page';
%= form_for  "../edit/$slug"   => (method => 'POST') => begin

%==  ! $isnew ? qq(<a href="../$slug">Cancel</a>) : '<a href="../index">Cancel</a>';
 &nbsp; | &nbsp; 
  <a href="https://rawgit.com/fletcher/human-markdown-reference/master/index.html" target='_blank'>MD cheat sheet</a>
<button onclick="open_cs(); return false;">Mark Down Cheat Sheet</button>
<a href="#" onclick="open_cs();return 0">Mark Down Cheat Sheet</a>

<script>
  function open_cs() {
  var w =  window.open("https://rawgit.com/fletcher/human-markdown-reference/master/index.html", "_blank", "toolbar=no, scrollbars=yes, status=no, menubar=no, location=no, width=480, height=480"); 
  return w?false:true;
  }
</script>

<a href="#preview">preview</a>

  %= text_area 'md_raw' => $md_raw, rows => 32, cols => 96, style => "font-family:Consolas,Monaco,Lucida Console,Liberation Mono,DejaVu Sans Mono,Bitstream Vera Sans Mono,Courier New, monospace;"

  %= text_field 'isnew' => $isnew, disabled => 1, size => 3
  %= submit_button 'Save',    name => 'btn', value => 'Save'
  %= submit_button 'Preview', name => 'btn', value => 'Preview' , id => 'preview'
% end
% if (!$isnew) {
  <a href="../<%= $slug %>">Cancel</a>
%} else {
  <a href="../index"><< Index</a>
%}

<hr/>
<article>
%== $html
</article>
<script>
  $(window).load(function() 
  {
     // executes when HTML-Document is loaded and DOM is ready
      var url = location.href;               //Save down the URL without hash.
      location.href = "#preview";                 //Go to the target element.
      history.replaceState(null,null,url);   //Dont like hashes. Changing it back.
  });
</script>


@@ login.html.ep
% layout 'default';
% title 'Log In';

<%= session 'user_name' %>

<h2>Login with just the passcode you received</h2>
%= form_for  "./login"   => (method => 'POST') => begin
  %= password_field 'passcode'
  %= submit_button 'Login', name => 'btn', value => 'login'
%= end




@@ layouts/default.html.ep
<!DOCTYPE html>
<head>
  <link rel="stylesheet" href="<%= config('app_path') %>/tacit-small.css">
  <link href="<%= config('app_path') %>/favicon.ico" rel="icon" type="image/x-icon" />
  <style>
    label.field-with-error { color: #dd7e5e }
    input.field-with-error { background-color: #fd9e7e }
  </style>


<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
  ga('create', '<%= config("google_analytics_ua") %>', 'auto');
  ga('send', 'pageview');
</script>




</head>
<html>
  <head><title><%= title %></title></head>
  <body style="font-size:0.8em">


  % if ( my $message = flash 'flash_ok' ) { 
    <div  style="border:1px solid #fc0; background: #fec; padding:1em;">
    <%= b( $message )->decode('UTF-8')->to_string %>
    </div>
  % }
  % if ( my $message = flash 'flash_not_ok' ) { 
    <div  style="border:1px solid #f00; background: #F7B5B5; padding:1em;">
    <%= b( $message )->decode('UTF-8')->to_string %>
    </div>
  % }

 <div style="font-size:50%">
  <%= content %></div></body>
% unless (defined stash('suppress_footer')) {
<footer>
  <div  style="border:1px solid #505050; background: #d1d1d1; padding:1em;">
    [ <a href="./index">Index</a> |  <a href="./ReadMe">MDWiki ReadMe</a> | About 
  
    ] 



% foreach my $key (keys config('bottom_bar')) {
%   my $val = config('bottom_bar')->{$key}; 
    <a href="<%= $val %>"><%= $key %></a> |

% };


  </div>
</footer>
% };

<hr/>

  % if(stash->{controller}){
  %=  'Controller: ' .stash->{controller}.'; Action: '.stash->{action};
  % }else{ 
  %=  (stash->{'mojo.captures'}{template}?'Template:'.stash->{'mojo.captures'}{template}:'');
  % }



</html>

@@
# ex: set tabstop=2 shiftwidth=2 expandtab:
